# IMPORTING REQUIRED MODULES

import os  
# 'os' is a built-in Python module used to interact with the operating system.
# os.path.join() combines directory and file names into a full path that works on all systems.

from fpdf import FPDF  
# 'fpdf' is a third-party library to create PDF files. 'FPDF' is the main class for PDF creation.

from datetime import datetime  
# 'datetime' is a built-in module. 'datetime.now()' gives the current date and time.


# SETTING FILE PATHS

LOG_FILE = os.path.join("logs", "sqli_logs.txt")  
# Full path to the log file: "logs/sqli_logs.txt"

REPORTS_DIR = "reports"  
# Directory name where generated PDF reports will be saved.


# CREATING CUSTOM PDF CLASS

class PDFReport(FPDF):  
    # Inheriting from FPDF class to customize PDF behavior

    def header(self):  
        # This method defines what will appear at the top of each page
        self.set_font("Arial", "B", 14)  
        # Sets font to Arial, Bold, size 14
        self.cell(0, 10, "SQL Injection Detection Report", 0, 1, "C")  
        # Adds a centered title across full width (0), height 10
        self.ln(5)  
        # Adds a 5-unit line break

    def footer(self):  
        # This method defines what appears at the bottom of each page
        self.set_y(-15)  
        # Moves cursor 15 units from the bottom
        self.set_font("Arial", "I", 8)  
        # Sets font to Arial, Italic, size 8
        page_num = f"Page {self.page_no()}"  
        # f-string: embeds current page number dynamically
        self.cell(0, 10, page_num, 0, 0, "C")  
        # Adds page number centered at the bottom


# PARSING A SINGLE LOG LINE

def parse_log_line(line):  
    # Accepts a single line from log file and extracts info

    # Sample line format:
    # [2025-07-17 14:20:15] IP: 192.168.1.100 | Endpoint: /batch-test | Payload: 1 OR 1=1 | Pattern: OR\s\d+=\d+

    parts = line.strip().split("|")  
    # Removes leading/trailing spaces and splits line at '|'
    
    if len(parts) < 4:  
        return None  
        # If parts are less than expected, return nothing

    try:  
        timestamp = line.split("]")[0].strip("[")  
        # Extracts text inside square brackets at start

        ip = parts[0].split("IP:")[1].strip()  
        # Extracts IP address after "IP:"

        endpoint = parts[1].split("Endpoint:")[1].strip()  
        # Extracts URL endpoint

        payload = parts[2].split("Payload:")[1].strip()  
        # Extracts detected payload (e.g., SQLi input)

        pattern = parts[3].split("Pattern:")[1].strip()  
        # Extracts regex pattern that matched

        return {
            "timestamp": timestamp,
            "ip": ip,
            "endpoint": endpoint,
            "payload": payload,
            "pattern": pattern
        }
        # Returns a dictionary of parsed values

    except IndexError:  
        # In case any split or index fails
        return None  


# MAIN FUNCTION TO GENERATE PDF REPORT

def generate_report():
    print("No logd Found to generate report.")  
    # Message (but typo: 'logd' should be 'logs')
    return  
    # Stops function here (you need to remove this to generate real reports)

    os.makedirs(REPORTS_DIR, exist_ok=True)  
    # Creates 'reports' directory if it doesn't exist

    pdf = PDFReport()  
    # Creates an instance of our custom PDF class

    pdf.add_page()  
    # Adds a new page to PDF

    pdf.set_font("Arial", size=12)  
    # Sets default font

    with open(LOG_FILE, "r") as file:  
        lines = file.readlines()  
        # Opens the log file and reads all lines

    if not lines:  
        print("Log file is empty. No report generated.")
        return  
        # Stops if no log entries found

    for line in lines:  
        entry = parse_log_line(line)  
        # Parses each line into a structured dictionary

        if entry:  
            pdf.set_font("Arial", "B", 11)
            pdf.cell(0, 10, f"Timestamp: {entry['timestamp']}", ln=1)
            
            pdf.set_font("Arial", size=11)
            pdf.cell(0, 8, f"IP: {entry['ip']} | Endpoint: {entry['endpoint']}", ln=1)

            pdf.multi_cell(0, 8, f"Payload: {entry['payload']}")
            pdf.multi_cell(0, 8, f"Matched Pattern: {entry['pattern']}")
            pdf.ln(5)  
            # Adds space after each log block

    # Define filename with current datetime
    report_filename = os.path.join(REPORTS_DIR, f"sqli_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf")

    pdf.output(report_filename)  
    # Saves the generated PDF

    print(f"Report generated: {report_filename}")  
    # Confirms report generation


# ENTRY POINT OF THE SCRIPT

if __name__ == "__main__":  
    # Python keyword: runs code only if file is run directly, not imported
    generate_report()  
    # Calls the report generation function
