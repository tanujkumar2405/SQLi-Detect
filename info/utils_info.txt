Filename: utils_explained.txt

1. import os  
   → Imports the `os` module which helps interact with the operating system (e.g., creating folders, working with file paths).

2. import re  
   → Imports the `re` module to use **regular expressions** (powerful pattern matching tool in strings).

3. from datetime import datetime  
   → From the `datetime` module, only the `datetime` class is imported to get and format current date and time.

5. LOG_FILE = os.path.join("logs", "sqli_logs.txt")  
   → Creates a full path for the log file by combining folder (`logs`) and file name.  
   → Works across all OS (Windows, Linux, etc.).

7. def load_patterns(file_path='patterns.txt'):  
   → Defines a function to load SQLi patterns from a file.  
   → Default file path is 'patterns.txt'.

9. """ Load regex patterns from a file, ignoring empty lines. """  
   → This is a **docstring** to describe what the function does.

10. with open(file_path, 'r') as file:  
    → Opens the file in **read mode** (`'r'`) using a `with` block for automatic file closing.

11. return [line.strip() for line in file.readlines() if line.strip()]  
    → Reads all lines, removes leading/trailing spaces with `strip()`, and ignores blank lines.  
    → Returns the cleaned list of regex patterns.

13. def detect_sqli(payload, patterns):  
    → Defines a function to check if a user input (`payload`) matches any SQLi pattern.

15. """ Check if the input matches any SQLi pattern. """  
    → Another docstring to explain the function's purpose.

16. for pattern in patterns:  
    → Loops through all patterns one by one.

17. if re.search(pattern, payload):  
    → Checks if the input (`payload`) contains a pattern match using regex.

18. return pattern  
    → If a pattern is found, return that matched pattern.

19. return None  
    → If no pattern is found, return `None`.

21. def log_attack(ip, endpoint, payload, pattern):  
    → Defines a function to save attack details to a log file.

23. """ Append detected SQLi attack details with timestamp to log file. """  
    → Describes what the `log_attack` function does.

25. os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)  
    → Creates the logs folder if it doesn’t already exist.  
    → `exist_ok=True` prevents errors if folder is already there.

27. timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  
    → Gets current date and time in the format like: `2025-07-18 12:35:00`.

28. log_entry = (f"[{timestamp}] IP: {ip} | Endpoint: {endpoint} | "  
                 f"Payload: {payload} | Pattern: {pattern}\\n")  
    → Prepares a full line of log text with details and timestamp.

31. with open(LOG_FILE, "a") as log:  
    → Opens the log file in **append mode** (`"a"`) so new entries are added.

32. log.write(log_entry)  
    → Writes the prepared log entry into the file.
